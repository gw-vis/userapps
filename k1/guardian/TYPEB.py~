import time
import math
from guardian import GuardState
from guardian import GuardStateDecorator
from guardian import NodeManager
import os
import sendAlert as sa
import VISfunction as vf
from burt import *
import vistoolstest as vistools

import sys

globaldir = dir()

__,OPTIC = SYSTEM.split('_')
optic = OPTIC.lower() #2019-01-16 Terrence, 2019-04-11 MB
vis = None
def checkvis():
    global vis
    if vis == None:
        vis=vistools.Vis((SYSTEM,ezca))


userapps = '/opt/rtcds/userapps/release/'
IFO = os.getenv('IFO')
ifo = IFO.lower()
SITE = os.getenv('SITE')
site = SITE.lower()
dorw = 2
verbose=False

def modelName(OPTIC):
    return ifo+'vis'+OPTIC

##################################################
# initialization values

# initial REQUEST state
request = 'SAFE'

# NOMINAL state, which determines when node is OK
nominal = 'IM_DAMP_ENGAGED'

##################################################
##################################################
# Define useful constants here
class timeConsts():
    IPSETRamp=30
    GASSETRamp=10
    OLSETRamp=10
    DCCTRLRamp=5
    DAMPRamp=6
    offRamp=10
    OLSERVORamp=0
    rampNotifyInterval=1
class buttons():
#     format:
#     buttonName=['Switch name (shown as channel name)','bit number']
    input=['SW1',2]
    offset=['SW1',3]
    output=['SW2',10]
    ramping=['SW2',12] #bit number is 12 if the filter is turned on by setting gain to 1, 13 if the filter is turned on by pressing offset. NOTE: INPUT/OUTPUT DOESN'T TRIGGER RAMP.
    clrHist=['RSET',1]
#

typeBtime=timeConsts()
typeBsw=buttons()
##################################################
WD = ['TM','IM','BF','F1','F0','IP']
#BIO = ['TM','IMV','IMH','GAS','IP'] # full list
BIO = ['TM','IMV','GAS','IP'] # list with IMH removed to work around spurious WD output.
ochitsuke_sec = 20 # waiting time to stay at DAMPED in seconds
# Tool for taking safe snapshot
reqfile = vf.req_file_path(optic)+'/autoBurt.req'
snapfile = '/opt/rtcds/userapps/release/vis/k1/burtfiles/'+vf.modelName(optic)+'_guardian_safe.snap'
safeDir= userapps+'vis/'+ifo+'/burtfiles/'+ifo+'vis'+optic+'_safe.snap'
snapDir= userapps+'vis/'+ifo+'/burtfiles/'
alignSnap = snapDir+ifo+'vis'+optic+'p_align.snap'
misalignSnap= snapDir+ifo+'vis'+optic+'p_misalign.snap'
ipSnap= snapDir+ifo+'vis'+optic+'t_IP.snap'
gasSnap= snapDir+ifo+'vis'+optic+'t_GAS.snap'

##################################################
# functions
def is_tripped_BIO(BIO):
    AnalogWD_state = False
    for name in BIO:
        AnalogWD_state = AnalogWD_state or ( (int(ezca['VIS-'+OPTIC+'_BIO_'+name+'_MON']) & 983040) != 0 ) # check if any coil driver is tripped or not
    return AnalogWD_state

def is_tripped_SWD(OPTIC,WD):
    WD_state = False
    for name in WD:
        WD_state = WD_state or (ezca['VIS-'+OPTIC+'_'+name+'_WDMON_STATE'] != 1) # check if any user WD is tripped or not
    return WD_state

def is_tripped_IOP(OPTIC):
    return ezca['VIS-'+OPTIC+'_DACKILL_STATE'] != 1 # check if IOP WD is tripped

def is_tripped(OPTIC,WD,BIO):
    # list of WD channel names and BIO channel names to be specified
    return is_tripped_SWD(OPTIC,WD) or is_tripped_IOP(OPTIC) or is_tripped_BIO(BIO)

def is_ramping(stage,block,dof,rampButton=typeBsw.ramping):
    val1=(int(ezca.read('VIS-'+OPTIC+'_'+stage+'_'+block+'_'+dof+'_'+rampButton[0]+'R'))&2**12)>>12
    val2=(int(ezca.read('VIS-'+OPTIC+'_'+stage+'_'+block+'_'+dof+'_'+rampButton[0]+'R'))&2**13)>>13
#    print(val2)
    return val1==1 or val2 ==1

def buttonOn(stage,block,dof,button):
    val=(int(ezca.read('VIS-'+OPTIC+'_'+stage+'_'+block+'_'+dof+'_'+button[0]+'R'))&2**button[1])>>button[1]
    while val==0:                                                #While the button is off, switch it on
        ezca['VIS-'+OPTIC+'_'+stage+'_'+block+'_'+dof+'_'+button[0]] = 2**button[1] #Release button
        time.sleep(0.3)                              #Had to introduce some delay in between channeling writing, or else some will be ignored. I don't know why.
        val=(int(ezca.read('VIS-'+OPTIC+'_'+stage+'_'+block+'_'+dof+'_'+button[0]+'R'))&2**button[1])>>button[1]
def buttonOff(stage,block,dof,button):
    val=(int(ezca.read('VIS-'+OPTIC+'_'+stage+'_'+block+'_'+dof+'_'+button[0]+'R'))&2**button[1])>>button[1]
    while val==1:                                                #While the button is on, switch it off
        ezca['VIS-'+OPTIC+'_'+stage+'_'+block+'_'+dof+'_'+button[0]] = 2**button[1] #Release button
        time.sleep(0.3)                              #Had to introduce some delay in between channeling writing, or else some will be ignored. I don't know why.
        val=(int(ezca.read('VIS-'+OPTIC+'_'+stage+'_'+block+'_'+dof+'_'+button[0]+'R'))&2**button[1])>>button[1]
def buttonRelease(stage,block,dof,button):
    ezca['VIS-'+OPTIC+'_'+stage+'_'+block+'_'+dof+'_'+button[0]] = 2**button[1] #Release button
def setVal(stage,block,dof,valName,val):
    ezca['VIS-'+OPTIC+'_'+stage+'_'+block+'_'+dof+'_'+valName]=val
    time.sleep(0.3)  
def valFromSnap(stage,block,dof,snapDir,valName):
    dict=readBurt(snapDir)
    val=dict['K1:VIS-'+OPTIC+'_'+stage+'_'+block+'_'+dof+'_'+valName]
    return(val)
def valFromEzca(stage,block,dof,valName):
    val=ezca.read('VIS-'+OPTIC+'_'+stage+'_'+block+'_'+dof+'_'+valName)
    return(val)
def engageControl(stages, blocks = ['DCCTRL','DAMP'],ramptimer=None):
    notify('Engaging control: '+str(stages)+' '+str(blocks))
    #Cutting off controller input, output and offset
    for STAGE in stages:
        for BLOCK in blocks:
            if STAGE == 'IP':
                for DOF in ['L','T','Y']:
                    for button in [typeBsw.input,typeBsw.offset,typeBsw.output]:
                        buttonOff(STAGE,BLOCK,DOF,button)
            if STAGE == 'BF' or STAGE == 'F1' or STAGE == 'F0':
                 for DOF in ['GAS']:
                    for button in [typeBsw.input,typeBsw.offset,typeBsw.output]:
                        buttonOff(STAGE,BLOCK,DOF,button)
            if STAGE == 'OL':
                for DOF in ['P','Y']:
                    for button in [typeBsw.input,typeBsw.offset,typeBsw.output]:
                        buttonOff('IM',STAGE+BLOCK,DOF,button)
            if STAGE == 'IM' and BLOCK == 'DAMP':
                for DOF in ['L','T','V','R','P','Y']:
                    for button in [typeBsw.input,typeBsw.offset,typeBsw.output]:
                        buttonOff(STAGE,BLOCK,DOF,button)
            if STAGE == 'TM' and BLOCK == 'DAMP':
                for DOF in ['L','P','Y']:
                    for button in [typeBsw.input,typeBsw.offset,typeBsw.output]:
                        buttonOff(STAGE,BLOCK,DOF,button)
                for DOF in ['LEN','PIT','YAW']:
                    for button in [typeBsw.input,typeBsw.offset,typeBsw.output]:
                        buttonOff(STAGE,'OPLEV_SERVO',DOF,button)
#    notify('Setting Setpoint to current position')
    for STAGE in stages:
        for BLOCK in ['SET']:
            if STAGE == 'IP':
                for DOF in ['L','T','Y']:
                    val=ezca.read('VIS-'+OPTIC+'_'+STAGE+'_BLEND_LVDT'+DOF+'_OUTPUT')
                    setVal(STAGE,BLOCK,DOF,'TRAMP',0)
                    setVal(STAGE,BLOCK,DOF,'GAIN',1)
                    setVal(STAGE,BLOCK,DOF,'OFFSET',val)
                    for button in [typeBsw.input,typeBsw.output,typeBsw.offset]:
                        buttonOn(STAGE,BLOCK,DOF,button)
            if STAGE == 'BF' or STAGE == 'F1' or STAGE == 'F0':
                for DOF in ['GAS']:
                    val=ezca.read('VIS-'+OPTIC+'_'+STAGE+'_LVDTINF_'+DOF+'_OUTPUT')
                    setVal(STAGE,BLOCK,DOF,'TRAMP',0)
                    setVal(STAGE,BLOCK,DOF,'GAIN',1)
                    setVal(STAGE,BLOCK,DOF,'OFFSET',val)
                    for button in [typeBsw.input,typeBsw.output,typeBsw.offset]:
                        buttonOn(STAGE,BLOCK,DOF,button)
            if STAGE == 'OL':
                for DOF in ['P','Y']:
                    if DOF=='P':
                        val=ezca.read('VIS-'+OPTIC+'_TM_OPLEV_SERVO_PIT_OUTPUT')
                    elif DOF == 'Y':
                        val=ezca.read('VIS-'+OPTIC+'_TM_OPLEV_SERVO_YAW_OUTPUT')
                    setVal('IM',STAGE+BLOCK,DOF,'TRAMP',0)
                    setVal('IM',STAGE+BLOCK,DOF,'GAIN',1)
                    setVal('IM',STAGE+BLOCK,DOF,'OFFSET',val)
                    for button in [typeBsw.input,typeBsw.output,typeBsw.offset]:
                        buttonOn('IM',STAGE+BLOCK,DOF,button)
#    notify('Engaging DC and Damping control')
    for STAGE in stages:
        for BLOCK in blocks:
            if STAGE == 'IP':
                for DOF in ['L','T','Y']:
                    buttonRelease(STAGE,BLOCK,DOF,typeBsw.clrHist)
                    for button in [typeBsw.input,typeBsw.offset,typeBsw.output]:
                        buttonOn(STAGE,BLOCK,DOF,button)
                    if BLOCK == 'DCCTRL':
                        setVal(STAGE,BLOCK,DOF,'TRAMP',typeBtime.DCCTRLRamp)
                    if BLOCK == 'DAMP':
                        setVal(STAGE,BLOCK,DOF,'TRAMP',typeBtime.DAMPRamp)
                    setVal(STAGE,BLOCK,DOF,'GAIN',1)
            if STAGE == 'BF' or STAGE == 'F1' or STAGE == 'F0':
                for DOF in ['GAS']:
                    buttonRelease(STAGE,BLOCK,DOF,typeBsw.clrHist)
                    for button in [typeBsw.input,typeBsw.offset,typeBsw.output]:
                        buttonOn(STAGE,BLOCK,DOF,button)
                    if BLOCK == 'DCCTRL':
                        setVal(STAGE,BLOCK,DOF,'TRAMP',typeBtime.DCCTRLRamp)
                    if BLOCK == 'DAMP':
                        setVal(STAGE,BLOCK,DOF,'TRAMP',typeBtime.DAMPRamp)
                    setVal(STAGE,BLOCK,DOF,'GAIN',1)
            if STAGE == 'OL':
                for DOF in ['P','Y']:
                    buttonRelease('IM',STAGE+BLOCK,DOF,typeBsw.clrHist)
                    for button in [typeBsw.input,typeBsw.offset,typeBsw.output]:
                        buttonOn('IM',STAGE+BLOCK,DOF,button)
                    if BLOCK == 'DCCTRL':
                        setVal('IM',STAGE+BLOCK,DOF,'TRAMP',typeBtime.DCCTRLRamp)
                    if BLOCK == 'DAMP':
                        setVal('IM',STAGE+BLOCK,DOF,'TRAMP',typeBtime.DAMPRamp)
                    setVal('IM',STAGE+BLOCK,DOF,'GAIN',1)
            if STAGE == 'IM' and BLOCK == 'DAMP':
                for DOF in ['L','T','V','R','P','Y']:
                    buttonRelease(STAGE,BLOCK,DOF,typeBsw.clrHist)
                    for button in [typeBsw.input,typeBsw.offset,typeBsw.output]:
                        buttonOn(STAGE,BLOCK,DOF,button)
                    setVal(STAGE,BLOCK,DOF,'TRAMP',typeBtime.DAMPRamp)
                    setVal(STAGE,BLOCK,DOF,'GAIN',1)
            if STAGE == 'TM' and BLOCK == 'DAMP':
                for DOF in ['L','P','Y']:
                    buttonRelease(STAGE,BLOCK,DOF,typeBsw.clrHist)
                    for button in [typeBsw.input,typeBsw.offset,typeBsw.output]:
                        buttonOn(STAGE,BLOCK,DOF,button)
                    setVal(STAGE,BLOCK,DOF,'TRAMP',typeBtime.DAMPRamp)
                    setVal(STAGE,BLOCK,DOF,'GAIN',1)
                for DOF in ['LEN','PIT','YAW']:
                    buttonRelease(STAGE,'OPLEV_SERVO',DOF,typeBsw.clrHist)
                    for button in [typeBsw.input,typeBsw.offset,typeBsw.output]:
                        buttonOn(STAGE,'OPLEV_SERVO',DOF,button)
                    setVal(STAGE,'OPLEV_SERVO',DOF,'TRAMP',typeBtime.OLSERVORamp)
                    setVal(STAGE,'OPLEV_SERVO',DOF,'GAIN',1)
    notify('Starting ramp up of control, please wait')
    ramptimer.timer['ramping']=typeBtime.rampNotifyInterval # declare a timer
    while 1:
        ramping=0
        for STAGE in stages:
            for BLOCK in blocks:
                if STAGE == 'IP':
                    for DOF in ['L','T','Y']:
                        if is_ramping(STAGE,BLOCK,DOF) == True:
                            ramping|=1
                if STAGE == 'BF' or STAGE == 'F1' or STAGE == 'F0':
                    for DOF in ['GAS']:
                        if is_ramping(STAGE,BLOCK,DOF) == True:
                            ramping|=1
                if STAGE == 'IM' and BLOCK == 'DAMP':
                    for DOF in ['L','T','V','R','P','Y']:
                        if is_ramping(STAGE,BLOCK,DOF) == True:
                            ramping|=1
                if STAGE == 'OL':
                    for DOF in ['P','Y']:
                        if is_ramping('IM',STAGE+BLOCK,DOF) == True:
                            ramping|=1
                if STAGE == 'TM' and BLOCK == 'DAMP':
                    for DOF in ['L','P','Y']:
                        if is_ramping(STAGE,BLOCK,DOF) == True:
                            ramping|=1
                    for DOF in ['LEN','PIT','YAW']:
                        if is_ramping(STAGE,'OPLEV_SERVO',DOF) == True:
                            ramping|=1
        if ramping == 1:
            if ramptimer.timer['ramping']:
                ramptimer.timer['ramping']=typeBtime.rampNotifyInterval
        else:
            break
        if is_tripped(OPTIC,WD,BIO):
#        if vis.trippedWds()!=[] or is_tripped_BIO(BIO):
            return 'TRIPPED'
#    notify('Setting setpoint according to the align snapshot with 100 seconds ramp')
    for STAGE in stages:
        for BLOCK in ['SET']:
            if STAGE == 'IP':
                for DOF in ['L','T','Y']:
                    for valName in ['OFFSET']:
                        val=valFromSnap(STAGE,BLOCK,DOF,ipSnap,valName)
                        setVal(STAGE,BLOCK,DOF,'TRAMP',typeBtime.IPSETRamp)
                        setVal(STAGE,BLOCK,DOF,valName,val)
            if STAGE == 'BF' or STAGE == 'F1' or STAGE == 'F0':
                for DOF in ['GAS']:
                    for valName in ['OFFSET']:
                        val=valFromSnap(STAGE,BLOCK,DOF,gasSnap,valName)
                        setVal(STAGE,BLOCK,DOF,'TRAMP',typeBtime.GASSETRamp)
                        setVal(STAGE,BLOCK,DOF,valName,val)
#            if STAGE == 'OL':
#                for DOF in ['P','Y']:
#                    for valName in ['OFFSET']:
#                        val=valFromSnap('IM',STAGE+BLOCK,DOF,alignSnap,valName)
#                        setVal('IM',STAGE+BLOCK,DOF,'TRAMP',typeBtime.OLSETRamp)
#                        setVal('IM',STAGE+BLOCK,DOF,valName,val)
    notify('Starting ramp to set point, please wait')
    ramptimer.timer['ramping']=typeBtime.rampNotifyInterval # declare a timer
    while 1:
        ramping=0
        for STAGE in stages:
            for BLOCK in ['SET']:
                if STAGE == 'IP':
                    for DOF in ['L','T','Y']:
                        if is_ramping(STAGE,BLOCK,DOF) == True:
                            ramping|=1
                if STAGE == 'BF' or STAGE == 'F1' or STAGE == 'F0':
                    for DOF in ['GAS']:
                        if is_ramping(STAGE,BLOCK,DOF) == True:
                            ramping|=1
                if STAGE == 'OL':
                    for DOF in ['P','Y']:
                        if is_ramping('IM',STAGE+BLOCK,DOF) == True:
                            ramping|=1
        if ramping == 1:
            if ramptimer.timer['ramping']:
                ramptimer.timer['ramping']=typeBtime.rampNotifyInterval
        else:
            break
        if is_tripped(OPTIC,WD,BIO):
#        if vis.trippedWds()!=[] or is_tripped_BIO(BIO):
            return 'TRIPPED'
    return True

def align(SNAP,ramptimer=None):
    for STAGE in ['OL']:
        for BLOCK in ['SET']:
            if STAGE == 'OL':
                for DOF in ['P','Y']:
                    for valName in ['OFFSET']:
                        val=valFromSnap('IM',STAGE+BLOCK,DOF,SNAP,valName)
                        setVal('IM',STAGE+BLOCK,DOF,'TRAMP',typeBtime.OLSETRamp)
                        setVal('IM',STAGE+BLOCK,DOF,valName,val)
    notify('Starting ramp to aligned/misaligned state, please wait')
    ramptimer.timer['ramping']=typeBtime.rampNotifyInterval # declare a timer
    while 1:
        ramping=0
        for STAGE in ['OL']:
            for BLOCK in ['SET']:
                for DOF in ['P','Y']:
                    if is_ramping('IM',STAGE+BLOCK,DOF) == True:
                        ramping|=1
        if ramping == 1:
            if ramptimer.timer['ramping']:
                ramptimer.timer['ramping']=typeBtime.rampNotifyInterval
        else:
            break
        if is_tripped(OPTIC,WD,BIO):
#        if vis.trippedWds()!=[] or is_tripped_BIO(BIO):
            return 'TRIPPED'
    return True

def rampDown(stages, blocks = ['DCCTRL','DAMP'],ramptimer=None):
    notify('ramptimer = '+str(ramptimer))
    notify('Disengaging control: '+str(stages)+' '+str(blocks))
    for STAGE in stages:
        for BLOCK in blocks:
            if STAGE == 'IP':
                for DOF in ['L','T','Y']:
                    setVal(STAGE,BLOCK,DOF,'TRAMP',typeBtime.offRamp)
                    setVal(STAGE,BLOCK,DOF,'GAIN',0)
            if STAGE == 'BF' or STAGE == 'F1' or STAGE == 'F0':
                for DOF in ['GAS']:
                    setVal(STAGE,BLOCK,DOF,'TRAMP',typeBtime.offRamp)
                    setVal(STAGE,BLOCK,DOF,'GAIN',0)
            if STAGE == 'OL':
                for DOF in ['P','Y']:
                    setVal('IM',STAGE+BLOCK,DOF,'TRAMP',typeBtime.offRamp)
                    setVal('IM',STAGE+BLOCK,DOF,'GAIN',0)
            if STAGE == 'IM' and BLOCK == 'DAMP':
                for DOF in ['L','T','V','R','P','Y']:
                    setVal(STAGE,BLOCK,DOF,'TRAMP',typeBtime.offRamp)
                    setVal(STAGE,BLOCK,DOF,'GAIN',0)
            if STAGE == 'TM' and BLOCK == 'DAMP':
                for DOF in ['L','P','Y']:
                    setVal(STAGE,BLOCK,DOF,'TRAMP',typeBtime.offRamp)
                    setVal(STAGE,BLOCK,DOF,'GAIN',0)
    notify('Starting ramp down of control, please wait')
    ramptimer.timer['ramping']=typeBtime.rampNotifyInterval # declare a timer
    while 1:
        ramping=0
        for STAGE in stages:
            for BLOCK in blocks:
                if STAGE == 'IP':
                    for DOF in ['L','T','Y']:
                        if is_ramping(STAGE,BLOCK,DOF) == True:
                            ramping|=1
                if STAGE == 'BF' or STAGE == 'F1' or STAGE == 'F0':
                    for DOF in ['GAS']:
                        if is_ramping(STAGE,BLOCK,DOF) == True:
                            ramping|=1
                if STAGE == 'IM' and BLOCK == 'DAMP':
                    for DOF in ['L','T','V','R','P','Y']:
                        if is_ramping(STAGE,BLOCK,DOF) == True:
                            ramping|=1
                if STAGE == 'OL':
                    for DOF in ['P','Y']:
                        if is_ramping('IM',STAGE+BLOCK,DOF) == True:
                            ramping|=1
                if STAGE == 'TM' and BLOCK == 'DAMP':
                    for DOF in ['L','P','Y']:
                        if is_ramping(STAGE,BLOCK,DOF) == True:
                            ramping|=1
                    for DOF in ['LEN','PIT','YAW']:
                        if is_ramping(STAGE,'OPLEV_SERVO',DOF) == True:
                            ramping|=1
        if ramping == 1:
            if ramptimer.timer['ramping']:
                ramptimer.timer['ramping']=typeBtime.rampNotifyInterval
        else:
            break
        if is_tripped(OPTIC,WD,BIO):
#        if vis.trippedWds()!=[] or is_tripped_BIO(BIO):
            return 'TRIPPED'
    return True
##################################################
# STATE decorators

class watchdog_check(GuardStateDecorator):
    """Decorator to check watchdog"""
    def pre_exec(self):
        global vis
        checkvis()
        if vf.is_tripped(OPTIC,WD,BIO):
#        if vis.trippedWds()!=[] or is_tripped_BIO(BIO):
            return 'TRIPPED'

##################################################
class INIT(GuardState):
    """Guardian starts at the INIT state after a restart, but then 
    transitions immediately to SAFE.
    """
    index = 0
    goto = True    

class TRIPPED(GuardState):
    """We end up at the TRIPPED state if any other state notices that one of the WDs has tripped. 
    We ramp things down (but not instantaneously in case it's just one of the BIO WDs and other things are live)
    and then proceed to SAFE when the WDs have been reset.
    """
    #FIXME: make it so.
    index = 1
    redirect = False
    request = False
    def main(self):
        global vis
        checkvis()
        notify('TRIPPED state, main()')
        waitFlag=0
        for BLOCK in ['TEST','DAMP']:
            for DOF in ['L', 'P', 'Y']:
                ezca['VIS-'+OPTIC+'_TM_%s_%s_TRAMP'%(BLOCK,DOF)] = typeBtime.offRamp
                if(ezca.read('VIS-'+OPTIC+'_TM_%s_%s_GAIN'%(BLOCK,DOF)))!=0:
                    waitFlag=1
                    ezca['VIS-'+OPTIC+'_TM_%s_%s_GAIN'%(BLOCK,DOF)] = 0
        ## IM ##
        for DOF in ['L','T','V','R','P','Y']:
            for BLOCK in ['TEST','DAMP']:            
                ezca['VIS-'+OPTIC+'_IM_%s_%s_TRAMP'%(BLOCK,DOF)] = typeBtime.offRamp
                if(ezca.read('VIS-'+OPTIC+'_IM_%s_%s_GAIN'%(BLOCK,DOF)))!=0:
                    waitFlag=1
                    ezca['VIS-'+OPTIC+'_IM_%s_%s_GAIN'%(BLOCK,DOF)] = 0
                if DOF == 'P' or DOF == 'Y':
                    for BLOCK in ['OPTICALIGN','OLDAMP','OLDCCTRL']:            
                        ezca['VIS-'+OPTIC+'_IM_%s_%s_TRAMP'%(BLOCK,DOF)] = typeBtime.offRamp
                        if(ezca.read('VIS-'+OPTIC+'_IM_%s_%s_GAIN'%(BLOCK,DOF)))!=0:
                            waitFlag=1
                            ezca['VIS-'+OPTIC+'_IM_%s_%s_GAIN'%(BLOCK,DOF)] = 0
        ## GAS ##
        for DOF in ['BF','F1','F0']:
            for BLOCK in ['TEST','DAMP','DCCTRL']:
                ezca['VIS-'+OPTIC+'_%s_%s_GAS_TRAMP'%(DOF,BLOCK)] = typeBtime.offRamp
                if(ezca.read('VIS-'+OPTIC+'_%s_%s_GAS_GAIN'%(DOF,BLOCK)))!=0:
                    waitFlag=1
                    ezca['VIS-'+OPTIC+'_%s_%s_GAS_GAIN'%(DOF,BLOCK)] = 0
        ## IP ##
        for DOF in ['L','T','Y']:
            for BLOCK in ['TEST','DAMP','DCCTRL']:
                ezca['VIS-'+OPTIC+'_IP_%s_%s_TRAMP'%(BLOCK,DOF)] = typeBtime.offRamp
                if(ezca.read('VIS-'+OPTIC+'_IP_%s_%s_GAIN'%(BLOCK,DOF)))!=0:
                    waitFlag=1
                    ezca['VIS-'+OPTIC+'_IP_%s_%s_GAIN'%(BLOCK,DOF)] = 0

        while 1:
            #check if ramp finished        
            ## IP ##
            ramping = 0
            for STAGE in ['IP']:
                for BLOCK in ['TEST','DAMP','DCCTRL']:
                    for DOF in ['L','T','Y']:
                        if is_ramping(STAGE,BLOCK,DOF) == True:
                            ramping |= 1
                        else:
                            ramping |= 0
            ## GAS ##
            for STAGE in ['F0','F1','BF']:
                for BLOCK in ['TEST','DAMP','DCCTRL']:
                    for DOF in ['GAS']:
                        if is_ramping(STAGE,BLOCK,DOF) == True:
                            ramping |= 1
                        else:
                            ramping |= 0
            ## IM ##
            for STAGE in ['IM']:
                for BLOCK in ['OPTICALIGN','OLDAMP','OLDCCTRL']:
                    for DOF in ['P','Y']:
                        if is_ramping(STAGE,BLOCK,DOF) == True:
                            ramping |= 1
                        else:
                            ramping |= 0
                for BLOCK in ['TEST','DAMP']:
                    for DOF in ['L','T','V','R','P','Y']:
                        if is_ramping(STAGE,BLOCK,DOF) == True:
                            ramping |= 1
                        else:
                            ramping |= 0
                        ## TM ##
            for STAGE in ['TM']:
                for BLOCK in ['TEST','DAMP']:
                    for DOF in ['L','P','Y']:
                        if is_ramping(STAGE,BLOCK,DOF) == True:
                            ramping |= 1
                        else:
                            ramping |= 0

            if ramping == 1:
                notify('Ramping down, please wait')
            else:
                log('Turning off the master switch')
                ezca['VIS-'+OPTIC+'_MASTERSWITCH'] = 'OFF'
#                vis.masterSwitchWrite('OFF')
                break
#            if vis.trippedWds()!=[]:
#                notify("Please reset software WD and DACKILL")
#                return(False)
#            if vis.trippedWds('IOP')!=[]:
#                notify("Please reset DACKILL")
#                return(False)
#            if is_tripped_BIO(BIO):
#                notify("Please reset coil driver WD in BIO")
#                return(False)
            if is_tripped_SWD(OPTIC,WD):
                notify("Please reset software WD and DACKILL")
                return(False)
            if is_tripped_IOP(OPTIC):
                notify("Please reset DACKILL")
                return(False)
            if is_tripped_BIO(OPTIC,BIO):
                notify("Please reset coil driver WD in BIO")
                return(False)
            return True
    def run(self):
        global vis
        checkvis()

#        if vis.trippedWds()!=[]:
#            notify("Please reset software WD and DACKILL")
#            return False
#        if vis.trippedWds('IOP')!=[]:
#            notify("Please reset DACKILL")
#            return False
#        if is_tripped_BIO(BIO):
#            notify("Please reset coil driver WDs in BIO")
#            return False
        if is_tripped_SWD(OPTIC,WD):
            notify("Please reset software WD and DACKILL")
            return(False)
        if is_tripped_IOP(OPTIC):
            notify("Please reset DACKILL")
            return(False)
        if is_tripped_BIO(OPTIC,BIO):
            notify("Please reset coil driver WD in BIO")
            return(False)
        return True

#class RESET(GuardState):
#    """RESET is the graceful wat to get to SAFE (as opposed to TRIPPED). 
#    We ramp things down under control, and then proceed to SAFE.
#    """
##FIXME: make it so.
#    index = 20
#    goto = True
#    request = False
#    def main(self):
#        global vis
#        checkvis()
#        return True

class SAFE(GuardState):
    """
    SAFE has all actuation shut off at the master switch.
    """
    #FIXME: make it so. In particular, move nearly all the code out into RESET and/or TRIPPED.
    index = 30
    #@watchdog_check
    def main(self):
        global vis
        checkvis()
        notify('In SAFE')
#        CAADDR=ezca['CRY-TEMPERATURE_EY_DUCT_SHIELD_ARM1']
#        notify(CAADDR)
#        notify(str(globaldir))
#        notify(dir(SAFE))
#        notify(dir(self))
#        notify(dir(ezca))
        log('Turning filters off')
        waitFlag=0
        for BLOCK in ['TEST','DAMP']:
            for DOF in ['L', 'P', 'Y']:
                ezca['VIS-'+OPTIC+'_TM_%s_%s_TRAMP'%(BLOCK,DOF)] = typeBtime.offRamp
                if(ezca.read('VIS-'+OPTIC+'_TM_%s_%s_GAIN'%(BLOCK,DOF)))!=0:
                    waitFlag=1
                    ezca['VIS-'+OPTIC+'_TM_%s_%s_GAIN'%(BLOCK,DOF)] = 0
        ## IM ##
        for DOF in ['L','T','V','R','P','Y']:
            for BLOCK in ['TEST','DAMP']:            
                ezca['VIS-'+OPTIC+'_IM_%s_%s_TRAMP'%(BLOCK,DOF)] = typeBtime.offRamp
                if(ezca.read('VIS-'+OPTIC+'_IM_%s_%s_GAIN'%(BLOCK,DOF)))!=0:
                    waitFlag=1
                    ezca['VIS-'+OPTIC+'_IM_%s_%s_GAIN'%(BLOCK,DOF)] = 0
            if DOF == 'P' or DOF == 'Y':
                for BLOCK in ['OPTICALIGN','OLDAMP','OLDCCTRL']:            
                    ezca['VIS-'+OPTIC+'_IM_%s_%s_TRAMP'%(BLOCK,DOF)] = typeBtime.offRamp
                    if(ezca.read('VIS-'+OPTIC+'_IM_%s_%s_GAIN'%(BLOCK,DOF)))!=0:
                        waitFlag=1
                        ezca['VIS-'+OPTIC+'_IM_%s_%s_GAIN'%(BLOCK,DOF)] = 0
        ## GAS ##
        for DOF in ['BF','F1','F0']:
            for BLOCK in ['TEST','DAMP','DCCTRL']:
                ezca['VIS-'+OPTIC+'_%s_%s_GAS_TRAMP'%(DOF,BLOCK)] = typeBtime.offRamp
                if(ezca.read('VIS-'+OPTIC+'_%s_%s_GAS_GAIN'%(DOF,BLOCK)))!=0:
                    waitFlag=1
                    ezca['VIS-'+OPTIC+'_%s_%s_GAS_GAIN'%(DOF,BLOCK)] = 0
        ## IP ##
        for DOF in ['L','T','Y']:
            for BLOCK in ['TEST','DAMP','DCCTRL']:
                ezca['VIS-'+OPTIC+'_IP_%s_%s_TRAMP'%(BLOCK,DOF)] = typeBtime.offRamp
                if(ezca.read('VIS-'+OPTIC+'_IP_%s_%s_GAIN'%(BLOCK,DOF)))!=0:
                    waitFlag=1
                    ezca['VIS-'+OPTIC+'_IP_%s_%s_GAIN'%(BLOCK,DOF)] = 0
#        if(waitFlag==1):        
#            log('Sleeping for 10 seconds')
#            time.sleep(10)
        notify('Starting ramp down to SAFE, please wait')
        self.timer['ramping']=typeBtime.rampNotifyInterval # declare a timer
        vis.waitForRampingToKickIn(self)
        while 1:
            #check if ramp finished        
            ## IP ##
            ramping = 0
            for STAGE in ['IP']:
                for BLOCK in ['TEST','DAMP','DCCTRL']:
                    for DOF in ['L','T','Y']:
                        if is_ramping(STAGE,BLOCK,DOF) == True:
                            ramping |= 1
                        else:
                            ramping |= 0
            ## GAS ##
            for STAGE in ['F0','F1','BF']:
                for BLOCK in ['TEST','DAMP','DCCTRL']:
                    for DOF in ['GAS']:
                        if is_ramping(STAGE,BLOCK,DOF) == True:
                            ramping |= 1
                        else:
                            ramping |= 0
            ## IM ##
            for STAGE in ['IM']:
                for BLOCK in ['OPTICALIGN','OLDAMP','OLDCCTRL']:
                    for DOF in ['P','Y']:
                        if is_ramping(STAGE,BLOCK,DOF) == True:
                            ramping |= 1
                        else:
                            ramping |= 0
                for BLOCK in ['TEST','DAMP']:
                    for DOF in ['L','T','V','R','P','Y']:
                        if is_ramping(STAGE,BLOCK,DOF) == True:
                            ramping |= 1
                        else:
                            ramping |= 0
            ## TM ##
            for STAGE in ['TM']:
                for BLOCK in ['TEST','DAMP']:
                    for DOF in ['L','P','Y']:
                        if is_ramping(STAGE,BLOCK,DOF) == True:
                            ramping |= 1
                        else:
                            ramping |= 0
#            for STAGE in ['TM','IM','BF','F0','F1','IP']:
#                if STAGE == 'IP' or STAGE == 'BF' or STAGE == 'F1' or STAGE == 'F0':
#                    for BLOCK in ['TEST', 'DAMP', 
            if ramping == 1:
                if self.timer['ramping']:
                    self.timer['ramping']=typeBtime.rampNotifyInterval
            else:
                log('Turning off the master switch')
                ezca['VIS-'+OPTIC+'_MASTERSWITCH'] = 'OFF'
#                vis.masterSwitchWrite('OFF')
                break
#            if vis.trippedWds()!=[] or is_tripped_BIO(BIO):
#               return('TRIPPED')
            if is_tripped(OPTIC,WD,BIO):
                return('TRIPPED')
        return True

    def run(self):
        global vis
        checkvis()
#        notify(str(vis.dampPvs()))
#        if vis.trippedWds()!=[] or is_tripped_BIO(BIO):
        if is_tripped(OPTIC,WD,BIO):
            return('TRIPPED')
        else:
            return True

class MASTERSWITCH_ON(GuardState):
    """Turn on master switch and continue to NEUTRAL"""
    index = 41
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        vis.masterSwitchWrite('ON')
#        ezca['VIS-'+OPTIC+'_MASTERSWITCH'] = 'ON'
        return True

class MASTERSWITCH_OFF(GuardState):
    """Turn off master switch and continue to NEUTRAL"""
    index = 42
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        vis.masterSwitchWrite('OFF')
#        ezca['VIS-'+OPTIC+'_MASTERSWITCH'] = 'OFF'
        return True

class NEUTRAL(GuardState):
    """As for SAFE but with the master switch on and the TEST gains set to 1."""
    index = 45
    @watchdog_check
    def run(self):
        global vis
        checkvis()
        vis.testRampWrite(0)
        vis.testOffsetWrite(0.0)
        vis.testGainWrite(1.0)
        return True

class ENGAGING_IP_CONTROL(GuardState):
    index=51
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
#        if(engageControl(stages=['IP'],ramptimer=self) == 'TRIPPED'):
#            return 'TRIPPED'
#        else:
#            return True
        notify('Engaging IP control 1: everything to OFF/0')
        vis.dcctrlInputSwitchWrite('OFF',levels=['IP'])
        vis.dampInputSwitchWrite('OFF',levels=['IP'])
        vis.dcctrlOutputSwitchWrite('OFF',levels=['IP'])
        vis.dampOutputSwitchWrite('OFF',levels=['IP'])
        vis.dcctrlOffsetSwitchWrite('OFF',levels=['IP'])
        vis.dampOffsetSwitchWrite('OFF',levels=['IP'])
        notify('Engaging IP control 2: copying current position to SET')
        for DOF in ['L','T','Y']:
            val=ezca.read('VIS-'+OPTIC+'_IP_BLEND_LVDT'+DOF+'_OUTPUT')
            vis.setRampWrite(0,levels=['IP'],chans=[DOF])
            vis.setGainWrite(1,levels=['IP'],chans=[DOF])
            vis.setOffsetWrite(val,levels=['IP'],chans=[DOF])
        notify('Engaging IP control 3: ramping up DCCTRL and DAMP gains')
        vis.dcctrlPressButton('CLEAR',levels=['IP'])
        vis.dampPressButton('CLEAR',levels=['IP'])
        vis.dcctrlInputSwitchWrite('ON',levels=['IP'])
        vis.dampInputSwitchWrite('ON',levels=['IP'])
        vis.dcctrlOffsetSwitchWrite('ON',levels=['IP'])
        vis.dampOffsetSwitchWrite('ON',levels=['IP'])
        vis.dcctrlOutputSwitchWrite('ON',levels=['IP'])
        vis.dampOutputSwitchWrite('ON',levels=['IP'])
        vis.dcctrlRampWrite(typeBtime.DCCTRLRamp,levels=['IP'])
        vis.dampRampWrite(typeBtime.DAMPRamp,levels=['IP'])
        vis.dcctrlGainWrite(1,levels=['IP'])
        vis.dampGainWrite(1,levels=['IP'])
        self.timer['ramping_DCCTRL_DAMP']=typeBtime.rampNotifyInterval  
#        self.timer['sleep']=1
#        while not(self.timer['sleep']):
#            notify('wait')
        vis.waitForRampingToKickIn(self)
        while any(vis.dcctrlRampingRead(levels=['IP'])) or any(vis.dampRampingRead(levels=['IP'])):
            if vis.trippedWds()!=[] or is_tripped_BIO(BIO):
                return 'TRIPPED'
            if self.timer['ramping_DCCTRL_DAMP']:
                self.timer['ramping_DCCTRL_DAMP']=typeBtime.rampNotifyInterval
        notify('Engaging IP control 4: moving to snapshot SET point')
        for DOF in ['L','T','Y']:
            val=valFromSnap('IP','SET',DOF,ipSnap,'OFFSET')
            notify('Read SET offset for IP '+DOF+' from '+ipSnap)
            vis.setRampWrite(typeBtime.IPSETRamp,levels=['IP'])
            vis.setOffsetWrite(val,levels=['IP'],chans=[DOF])
        self.timer['ramping_SET']=typeBtime.rampNotifyInterval
        vis.waitForRampingToKickIn(self)
        while any(vis.setRampingRead(levels=['IP'])):
            if vis.trippedWds()!=[] or is_tripped_BIO(BIO):
                return 'TRIPPED'
            if self.timer['ramping_SET']:
                self.timer['ramping_SET']=typeBtime.rampNotifyInterval

class DISENGAGING_IP_CONTROL(GuardState):
    index=52
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        if rampDown(stages=['IP'],ramptimer=self) == 'TRIPPED':
            return 'TRIPPED'
        else:
            return True

class IP_CONTROL_ENGAGED(GuardState):
    index=60
    @watchdog_check
    def run(self):
        global vis
        checkvis()
        return True

class ENGAGING_IM_DAMP(GuardState):
    index = 71
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        if(engageControl(stages=['IM'],ramptimer=self) == 'TRIPPED'):
            return 'TRIPPED'
        else:
            return True

class DISENGAGING_IM_DAMP(GuardState):
    index=72
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        if rampDown(stages=['IM'],ramptimer=self) == 'TRIPPED':
            return 'TRIPPED'
        else:
            return True

class IM_DAMP_ENGAGED(GuardState):
    index=80
    @watchdog_check
    def run(self):
        global vis
        checkvis()
        return True

class ENGAGING_TM_DAMP(GuardState):
    index = 91
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        if(engageControl(stages=['TM'],ramptimer=self) == 'TRIPPED'):
            return 'TRIPPED'
        else:
            return True

class DISENGAGING_TM_DAMP(GuardState):
    index=92
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        if rampDown(stages=['TM'],ramptimer=self) == 'TRIPPED':
            return 'TRIPPED'
        else:
            return True

class TM_DAMP_ENGAGED(GuardState):
    index=100
    @watchdog_check
    def run(self):
        global vis
        checkvis()
        return True

class ENGAGING_GAS_CONTROL(GuardState):
    index=111
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        for DOF in ['BF','F1','F0']:
            if(engageControl(stages=[DOF],ramptimer=self) == 'TRIPPED'):
                return 'TRIPPED'
        return True

class DISENGAGING_GAS_CONTROL(GuardState):
    index=112
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        for DOF in ['F0','F1','BF']:
            if rampDown(stages=[DOF],ramptimer=self) == 'TRIPPED':
                return 'TRIPPED'
        return True

class GAS_CONTROL_ENGAGED(GuardState):
    index=120
    @watchdog_check
    def run(self):
        global vis
        checkvis()
        return True

class ENGAGING_OL_CONTROL(GuardState):
    index=131
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        if(engageControl(stages=['OL'],ramptimer=self) == 'TRIPPED'):
            return 'TRIPPED'
        else:
            return True

class DISENGAGING_OL_CONTROL(GuardState):
    index=132
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        if rampDown(stages=['OL'],ramptimer=self) == 'TRIPPED':
            return 'TRIPPED'
        else:
            return True

class OL_CONTROL_ENGAGED(GuardState):
    index=140
    @watchdog_check
    def run(self):
        global vis
        checkvis()
        return True
class ALIGNING(GuardState):
    index=151
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        if (align(alignSnap,ramptimer=self) == 'TRIPPED'):
            return 'TRIPPED'
        else:
            return True

class ALIGNED(GuardState):
    index=160
    @watchdog_check
    def run(self):
        global vis
        checkvis()
        return True

class MISALIGNING(GuardState):
    index=152
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        if (align(misalignSnap,ramptimer=self) == 'TRIPPED'):
            return 'TRIPPED'
        else:
            return True

class MISALIGNED(GuardState):
    index=161
    @watchdog_check
    def run(self):
        global vis
        checkvis()
        return True

class DISENGAGING_ALIGN(GuardState):
    index=153
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        if rampDown(stages=['OL'],ramptimer=self) == 'TRIPPED':
            return 'TRIPPED'
        else:
            return True

class DISENGAGING_DAMPING(GuardState):
    index=171
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        if rampDown(stages=['OL','TM','IM','IP'],blocks=['DAMP'],ramptimer=self) == 'TRIPPED':
            return 'TRIPPED'
        else:
            return True

class DCCTRL_ONLY(GuardState):
    index=170
    @watchdog_check
    def run(self):
        global vis
        checkvis()
        return True

class REENGAGING_DAMPING(GuardState):
    index=172
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        if(engageControl(stages=['IP','IM','TM','OL'],blocks=['DAMP'],ramptimer=self) == 'TRIPPED'):
            return 'TRIPPED'
        else:
            return True

edges = [
('INIT','SAFE'),
#('RESET', 'SAFE'),
('TRIPPED','SAFE'),
('SAFE','MASTERSWITCH_ON'),
('MASTERSWITCH_ON','NEUTRAL'),
('NEUTRAL','ENGAGING_IP_CONTROL'),
('NEUTRAL','MASTERSWITCH_OFF'),
('MASTERSWITCH_OFF','SAFE'),
('ENGAGING_IP_CONTROL','IP_CONTROL_ENGAGED'),
('IP_CONTROL_ENGAGED','DISENGAGING_IP_CONTROL'),
('DISENGAGING_IP_CONTROL','NEUTRAL'),
('IP_CONTROL_ENGAGED','ENGAGING_GAS_CONTROL'),
('ENGAGING_GAS_CONTROL','GAS_CONTROL_ENGAGED'),
('GAS_CONTROL_ENGAGED','DISENGAGING_GAS_CONTROL'),
('DISENGAGING_GAS_CONTROL','IP_CONTROL_ENGAGED'),
('GAS_CONTROL_ENGAGED','ENGAGING_IM_DAMP'),
('ENGAGING_IM_DAMP','IM_DAMP_ENGAGED'),
('IM_DAMP_ENGAGED','DISENGAGING_IM_DAMP'),
('DISENGAGING_IM_DAMP','GAS_CONTROL_ENGAGED'),
('IM_DAMP_ENGAGED','ENGAGING_TM_DAMP'),
('ENGAGING_TM_DAMP','TM_DAMP_ENGAGED'),
('TM_DAMP_ENGAGED','DISENGAGING_TM_DAMP'),
('DISENGAGING_TM_DAMP','IM_DAMP_ENGAGED'),
('TM_DAMP_ENGAGED','ENGAGING_OL_CONTROL'),
('ENGAGING_OL_CONTROL','OL_CONTROL_ENGAGED'),
('OL_CONTROL_ENGAGED','DISENGAGING_OL_CONTROL'),
('DISENGAGING_OL_CONTROL','TM_DAMP_ENGAGED'),
('OL_CONTROL_ENGAGED','ALIGNING'),
('OL_CONTROL_ENGAGED','MISALIGNING'),
('OL_CONTROL_ENGAGED','DISENGAGING_DAMPING'),
('DISENGAGING_DAMPING','DCCTRL_ONLY'),
('DCCTRL_ONLY','REENGAGING_DAMPING'),
('REENGAGING_DAMPING','OL_CONTROL_ENGAGED'),
('ALIGNING','ALIGNED'),
('MISALIGNING','MISALIGNED'),
('ALIGNED','MISALIGNING'),
('ALIGNED','DISENGAGING_ALIGN'),
('MISALIGNED','ALIGNING'),
('MISALIGNED','DISENGAGING_ALIGN'),
('DISENGAGING_ALIGN','TM_DAMP_ENGAGED')
]

