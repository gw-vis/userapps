import time
import math
from guardian import GuardState
from guardian import GuardStateDecorator
from guardian import NodeManager
import os
import sendAlert as sa
import VISfunction as vf
from burt import *
import vistoolstest as vistools

import sys

globaldir = dir()

__,OPTIC = SYSTEM.split('_')
optic = OPTIC.lower() #2019-01-16 Terrence, 2019-04-11 MB
vis = None
def checkvis():
    global vis
    if vis == None:
        vis=vistools.Vis((SYSTEM,ezca))

userapps = '/opt/rtcds/userapps/release/'
IFO = os.getenv('IFO')
ifo = IFO.lower()
SITE = os.getenv('SITE')
site = SITE.lower()
dorw = 2
verbose=False

def modelName(OPTIC):
    return ifo+'vis'+OPTIC

##################################################
# initialization values

# initial REQUEST state
request = 'SAFE'

# NOMINAL state, which determines when node is OK
nominal = 'IM_DAMP_ENGAGED'

##################################################
##################################################
# Define useful constants here

class timeConsts():
    IPSETRamp=30
    GASSETRamp=10
    OLSETRamp=10
    DCCTRLRamp=5
    DAMPRamp=6
    offRamp=10
    OLSERVORamp=0
    rampNotifyInterval=1

class buttons():
#     format:
#     buttonName=['Switch name (shown as channel name)','bit number']
    input=['SW1',2]
    offset=['SW1',3]
    output=['SW2',10]
    ramping=['SW2',12] #bit number is 12 if the filter is turned on by setting gain to 1, 13 if the filter is turned on by pressing offset. NOTE: INPUT/OUTPUT DOESN'T TRIGGER RAMP.
    clrHist=['RSET',1]
#

typeBtime=timeConsts()
setRampDict={
'IP':typeBtime.IPSETRamp,
'F0':typeBtime.GASSETRamp,
'F1':typeBtime.GASSETRamp,
'BF':typeBtime.GASSETRamp,
'align':typeBtime.OLSETRamp,
'misalign':typeBtime.OLSETRamp
}
typeBsw=buttons()
##################################################
WD = ['TM','IM','BF','F1','F0','IP']
#BIO = ['TM','IMV','IMH','GAS','IP'] # full list
BIO = ['TM','IMV','GAS','IP'] # list with IMH removed to work around spurious WD output.
ochitsuke_sec = 20 # waiting time to stay at DAMPED in seconds
# Tool for taking safe snapshot
reqfile = vf.req_file_path(optic)+'/autoBurt.req'
snapfile = '/opt/rtcds/userapps/release/vis/k1/burtfiles/'+vf.modelName(optic)+'_guardian_safe.snap'
safeDir= userapps+'vis/'+ifo+'/burtfiles/'+ifo+'vis'+optic+'_safe.snap'
snapDir= userapps+'vis/'+ifo+'/burtfiles/'
alignSnap = snapDir+ifo+'vis'+optic+'p_align.snap'
misalignSnap= snapDir+ifo+'vis'+optic+'p_misalign.snap'
ipSnap= snapDir+ifo+'vis'+optic+'t_IP.snap'
gasSnap= snapDir+ifo+'vis'+optic+'t_GAS.snap'
setSnapDict={
'IP':ipSnap,
'F0':gasSnap,
'F1':gasSnap,
'BF':gasSnap,
'align':alignSnap,
'misalign':misalignSnap
}
##################################################
# functions
def is_tripped_BIO(BIO):
    AnalogWD_state = False
    for name in BIO:
        AnalogWD_state = AnalogWD_state or ( (int(ezca['VIS-'+OPTIC+'_BIO_'+name+'_MON']) & 983040) != 0 ) # check if any coil driver is tripped or not
    return AnalogWD_state

def is_tripped_SWD(OPTIC,WD):
    WD_state = False
    for name in WD:
        WD_state = WD_state or (ezca['VIS-'+OPTIC+'_'+name+'_WDMON_STATE'] != 1) # check if any user WD is tripped or not
    return WD_state

def is_tripped_IOP(OPTIC):
    return ezca['VIS-'+OPTIC+'_DACKILL_STATE'] != 1 # check if IOP WD is tripped

def is_tripped(OPTIC,WD,BIO):
    # list of WD channel names and BIO channel names to be specified
    return is_tripped_SWD(OPTIC,WD) or is_tripped_IOP(OPTIC) or is_tripped_BIO(BIO)

def valFromSnap(stage,block,dof,snapDir,valName):
    dict=readBurt(snapDir)
    val=dict['K1:VIS-'+OPTIC+'_'+stage+'_'+block+'_'+dof+'_'+valName]
    return(val)

def waitForRamp(stateObj,visObj,level,text,rampNotifyInterval=typeBtime.rampNotifyInterval):
    if level == '':
        level=[]
    else:
        level=[level]
    stateObj.timer[text]=rampNotifyInterval
    vis.waitForRampingToKickIn(stateObj,0.3)
    while any(visObj.dcctrlRampingRead(levels=level)) or any(visObj.dampRampingRead(levels=level)) or any(visObj.setRampingRead(levels=level)) or any(visObj.olDcctrlRampingRead(levels=level)) or any(visObj.olSetRampingRead(levels=level)):
        if visObj.trippedWds()!=[] or is_tripped_BIO(BIO):
            return 'TRIPPED'
        if stateObj.timer[text]:
            stateObj.timer[text]=rampNotifyInterval

def beginControlSequence(stateObj,visObj,level):
    filterReset(visObj,level)#reset filters
    enableControl(visObj,level)#enable controllers
    if waitForRamp(stateObj,visObj,level,'ramping_up_DAMP_(DCCTRL)',rampNotifyInterval=2.5) == 'TRIPPED':
        return 'TRIPPED'
    rampSetpoint(visObj,level)#ramp setpoints
    if waitForRamp(stateObj,visObj,level,'ramping_up_SET',rampNotifyInterval=2.5) == 'TRIPPED':
        return 'TRIPPED'
    
def filterReset(visObj,level):
    notify('Engaging '+level+' control 1: everything to OFF/0')
    visObj.dcctrlInputSwitchWrite('OFF',levels=[level])
    visObj.dampInputSwitchWrite('OFF',levels=[level])
    visObj.dcctrlOutputSwitchWrite('OFF',levels=[level])
    visObj.dampOutputSwitchWrite('OFF',levels=[level])
    visObj.dcctrlOffsetSwitchWrite('OFF',levels=[level])
    visObj.dampOffsetSwitchWrite('OFF',levels=[level])

def enableControl(visObj,level):
    notify('Engaging '+level+' control 2: copying current position to SET')
    if level not in ['IM','TM']:
        setpoints=visObj.witRead([level])
        visObj.setRampWrite(0,levels=[level])
        visObj.setGainWrite(1,levels=[level])
        visObj.setOffsetWrite(setpoints,levels=[level])
    notify('Engaging '+level+' control 3: ramping up (DCCTRL) and DAMP gains')
    visObj.dcctrlPressButton('CLEAR',levels=[level])
    visObj.dampPressButton('CLEAR',levels=[level])
    visObj.dcctrlInputSwitchWrite('ON',levels=[level])
    visObj.dampInputSwitchWrite('ON',levels=[level])
    visObj.dcctrlOutputSwitchWrite('ON',levels=[level])
    visObj.dampOutputSwitchWrite('ON',levels=[level])
    visObj.dcctrlRampWrite(typeBtime.DCCTRLRamp,levels=[level])
    visObj.dampRampWrite(typeBtime.DAMPRamp,levels=[level])
    visObj.dcctrlGainWrite(1,levels=[level])
    visObj.dampGainWrite(1,levels=[level])

def rampSetpoint(visObj,level):
    DOFs=visObj.setPvs(levels=[level])
    DOFs=[i.replace(level+'_SET_','') for i in DOFs]
    notify('Engaging '+level+' control 4: moving to snapshot SET point')
    if level not in ['IM','TM']:
        for DOF in DOFs:
            val=valFromSnap(level,'SET',DOF,setSnapDict[level],'OFFSET')
            notify('Read SET offset for '+level+' '+DOF+' from '+setSnapDict[level])
            visObj.setRampWrite(setRampDict[level],levels=[level])
            visObj.setOffsetWrite(val,levels=[level],chans=[DOF])

def disengageControlSequence(stateObj,visObj,level,ramptime=typeBtime.offRamp):
    visObj.dcctrlRampWrite(ramptime,levels=[level])
    visObj.dcctrlGainWrite(0,levels=[level])
    if waitForRamp(stateObj,visObj,level,'ramping_down_DCCTRL',rampNotifyInterval=2.5) == 'TRIPPED':
        return 'TRIPPED'
    visObj.dampRampWrite(ramptime,levels=[level])
    visObj.dampGainWrite(0,levels=[level])
    if waitForRamp(stateObj,visObj,level,'ramping_down_DAMP',rampNotifyInterval=2.5) == 'TRIPPED':
        return 'TRIPPED'

def olBeginControlSequence(stateObj,visObj,level):
    olFilterReset(visObj,level)#reset filters
    olEnableControl(visObj,level)#enable controllers
    if waitForRamp(stateObj,visObj,level,'ramping_up_OLDCCTRL',rampNotifyInterval=2.5) == 'TRIPPED':
        return 'TRIPPED'

def olAlign(stateObj,visObj,level,align):
    olRampSetpoint(visObj,level,align)#ramp setpoints
    if waitForRamp(stateObj,visObj,level,'ramping_up_OLSET',rampNotifyInterval=2.5) == 'TRIPPED':
        return 'TRIPPED'

def olFilterReset(visObj,level):
    notify('Engaging '+level+' OL control 1: everything to OFF/0')
    visObj.olDcctrlInputSwitchWrite('OFF',levels=[level])
    visObj.olDcctrlOutputSwitchWrite('OFF',levels=[level])
    visObj.olDcctrlOffsetSwitchWrite('OFF',levels=[level])

def olEnableControl(visObj,level):
    notify('Engaging'+level+' OL control 2: copying current TM position to OLSET')
    setpoints=visObj.witRead(levels=['TM'],chans=['PIT','YAW'])
    visObj.olSetRampWrite(0,levels=[level])
    visObj.olSetGainWrite(1,levels=[level])
    visObj.olSetOffsetWrite(setpoints,levels=[level])
    notify('Engaging'+level+' OL control 3: ramping up OLDCCTRL gain')
    visObj.olDcctrlPressButton('CLEAR',levels=[level])
    visObj.olDcctrlInputSwitchWrite('ON',levels=[level])
    visObj.olDcctrlOutputSwitchWrite('ON',levels=[level])
    visObj.olDcctrlRampWrite(typeBtime.DCCTRLRamp,levels=[level])
    visObj.olDcctrlGainWrite(1,levels=[level])

def olRampSetpoint(visObj,level,align):
    DOFs=visObj.olSetPvs(levels=[level])
    DOFs=[i.replace(level+'_OLSET_','') for i in DOFs]
    notify('Engaging'+level+' OL control 4: moving to snapshot SET point ('+align+'ing)')
    for DOF in DOFs:
        val=valFromSnap(level,'OLSET',DOF,setSnapDict[align],'OFFSET')
        notify('Read OLSET offset for '+level+' '+DOF+' from '+setSnapDict[align])
        visObj.olSetRampWrite(setRampDict[align],levels=[level])
        visObj.olSetOffsetWrite(val,levels=[level],chans=[DOF])

def olDisengageControlSequence(stateObj,visObj,level,ramptime=typeBtime.offRamp):
    visObj.olDcctrlRampWrite(ramptime,levels=[level])
    visObj.olDcctrlGainWrite(0,levels=[level])
    if waitForRamp(stateObj,visObj,level,'ramping_down_OLDCCTRL',rampNotifyInterval=2.5) == 'TRIPPED':
        return 'TRIPPED'
    
def freezingOutputs(stateObj,visObj):
    notify('Freezing OLDCCTRL/DCCTRL outputs')
    visObj.olDcctrlInputSwitchWrite('OFF')
    visObj.dcctrlInputSwitchWrite('OFF')
    notify('Disengaging DAMP controls')
    visObj.dampRampWrite(typeBtime.offRamp)
    visObj.dampGainWrite(0)
    if waitForRamp(stateObj,visObj,'','ramping_down_DAMP',rampNotifyInterval=2.5) == 'TRIPPED':
        return 'TRIPPED'

def unFreezingOutputs(stateObj,visObj):
    notify('engaging DAMP controls')
    visObj.dampRampWrite(typeBtime.DAMPRamp)
    visObj.dampGainWrite(1)
    if waitForRamp(stateObj,visObj,'','ramping_up_DAMP',rampNotifyInterval=2.5) == 'TRIPPED':
        return 'TRIPPED'
    notify('Unfreezing OLDCCTRL/DCCTRL outputs')
    visObj.dcctrlInputSwitchWrite('ON')
    visObj.olDcctrlInputSwitchWrite('ON')

def resetSafe(stateObj,visObj):
    notify('Turning off all outputs Safely')
    visObj.testRampWrite(typeBtime.offRamp)
    visObj.alignRampWrite(typeBtime.offRamp)
    visObj.alignGainWrite(0)
    visObj.testGainWrite(0)
    if waitForRamp(stateObj,visObj,'','ramping_down_TEST_OPTICALIGN',rampNotifyInterval=2.5) == 'TRIPPED':
        return 'TRIPPED'
    visObj.olDcctrlRampWrite(typeBtime.offRamp)
    visObj.olDcctrlGainWrite(0)
    if waitForRamp(stateObj,visObj,'','ramping_down_OLDCCTRL',rampNotifyInterval=2.5) == 'TRIPPED':
        return 'TRIPPED'
    visObj.dcctrlRampWrite(typeBtime.offRamp)
    visObj.dampRampWrite(typeBtime.offRamp)    
    for level in ['TM','IM','F0','F1','BF','IP']:
        visObj.dcctrlGainWrite(0,levels=[level])
        if waitForRamp(stateObj,visObj,'','ramping_down_'+level+'DCCTRL',rampNotifyInterval=2.5) == 'TRIPPED':
            return 'TRIPPED'
        visObj.dampGainWrite(0,levels=[level])
        if waitForRamp(stateObj,visObj,'','ramping_down_'+level+'DAMP',rampNotifyInterval=2.5) == 'TRIPPED':
            return 'TRIPPED'
    visObj.masterSwitchWrite('OFF')
    

##################################################
# STATE decorators

class watchdog_check(GuardStateDecorator):
    """Decorator to check watchdog"""
    def pre_exec(self):
        global vis
        checkvis()
#        if vf.is_tripped(OPTIC,WD,BIO):
        if vis.trippedWds()!=[] or vis.trippedBioWds()!=[]:
            return 'TRIPPED'

##################################################
class INIT(GuardState):
    """Guardian starts at the INIT state after a restart, but then 
    transitions immediately to SAFE after ramping down all outputs.
    """
    index = 0  
    def main(self):
        global vis
        checkvis()
        notify('INIT state, main()')
        return resetSafe(self,vis)  

class TRIPPED(GuardState):
    """We end up at the TRIPPED state if any other state notices that one of the WDs has tripped. 
    We ramp things down (but not instantaneously in case it's just one of the BIO WDs and other things are live)
    and then proceed to SAFE when the WDs have been reset.
    """
    index = 1
    redirect = False
    request = False
    def main(self):
        global vis
        checkvis()
        notify('TRIPPED state, main()')
        resetSafe(self,visObj=vis)  
        if vis.trippedWds()!=[]:
            notify("Please reset software WD and DACKILL")
            return(False)
        if vis.trippedWds('IOP')!=[]:
            notify("Please reset DACKILL")
            return(False)
        if vis.trippedBioWds()!=[]:
            notify("Please reset coil driver WD in BIO")
            return(False)
#            if is_tripped_SWD(OPTIC,WD):
#                notify("Please reset software WD and DACKILL")
#                return(False)
#            if is_tripped_IOP(OPTIC):
#                notify("Please reset DACKILL")
#                return(False)
#            if is_tripped_BIO(OPTIC,BIO):
#                notify("Please reset coil driver WD in BIO")
#                return(False)
        return True
    def run(self):
        global vis
        checkvis()
        if vis.trippedWds()!=[]:
            notify("Please reset software WD and DACKILL")
            return False
        if vis.trippedWds('IOP')!=[]:
            notify("Please reset DACKILL")
            return False
        if vis.trippedBioWds()!=[]:
            notify("Please reset coil driver WDs in BIO")
            return False
#        if is_tripped_SWD(OPTIC,WD):
#            notify("Please reset software WD and DACKILL")
#            return(False)
#        if is_tripped_IOP(OPTIC):
#            notify("Please reset DACKILL")
#            return(False)
#        if is_tripped_BIO(BIO):
#            notify("Please reset coil driver WD in BIO")
#            return(False)
        return True

#class RESET(GuardState):
#    """RESET is the graceful wat to get to SAFE (as opposed to TRIPPED). 
#    We ramp things down under control, and then proceed to SAFE.
#    """
##FIXME: make it so.
#    index = 20
#    goto = True
#    request = False
#    def main(self):
#        global vis
#        checkvis()
#        return True

class SAFE(GuardState):
    """
    SAFE has all actuation shut off at the master switch.
    """
    #FIXME: make it so. In particular, move nearly all the code out into RESET and/or TRIPPED.
    index = 30
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        notify('In SAFE')

    @watchdog_check
    def run(self):
        global vis
        checkvis()
        return True
class MASTERSWITCH_ON(GuardState):
    """Turn on master switch and continue to NEUTRAL"""
    index = 41
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        vis.masterSwitchWrite('ON')
#        ezca['VIS-'+OPTIC+'_MASTERSWITCH'] = 'ON'
        return True

class MASTERSWITCH_OFF(GuardState):
    """Turn off master switch and continue to SAFE"""
    index = 42
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        vis.masterSwitchWrite('OFF')
#        ezca['VIS-'+OPTIC+'_MASTERSWITCH'] = 'OFF'
        return True

class NEUTRAL(GuardState):
    """As for SAFE but with the master switch on and the TEST gains set to 1."""
    index = 45
    @watchdog_check
    def main(self):
        vis.testRampWrite(0)
        vis.testOffsetWrite(0.0)
        vis.testGainWrite(1.0)

    def run(self):
        global vis
        checkvis()
        return True

class ENGAGING_IP_CONTROL(GuardState):
    index=51
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        return beginControlSequence(self,visObj=vis,level='IP')

class DISENGAGING_IP_CONTROL(GuardState):
    index=52
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        return disengageControlSequence(self,visObj=vis,level='IP')

class IP_CONTROL_ENGAGED(GuardState):
    index=60
    @watchdog_check
    def run(self):
        global vis
        checkvis()
        return True

class ENGAGING_IM_DAMP(GuardState):
    index = 91
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        return beginControlSequence(self,visObj=vis,level='IM')

class DISENGAGING_IM_DAMP(GuardState):
    index=92
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        return disengageControlSequence(self,visObj=vis,level='IM')

class IM_DAMP_ENGAGED(GuardState):
    index=100
    @watchdog_check
    def run(self):
        global vis
        checkvis()
        return True

class ENGAGING_TM_DAMP(GuardState):
    index = 111
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        return beginControlSequence(self,visObj=vis,level='TM')

class DISENGAGING_TM_DAMP(GuardState):
    index=112
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        return disengageControlSequence(self,visObj=vis,level='TM')

class TM_DAMP_ENGAGED(GuardState):
    index=120
    @watchdog_check
    def run(self):
        global vis
        checkvis()
        return True

class ENGAGING_GAS_CONTROL(GuardState):
    index=71
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        for level in ['BF','F1','F0']:
            if(beginControlSequence(self,visObj=vis,level=level) == 'TRIPPED'):
                return 'TRIPPED'
        return True

class DISENGAGING_GAS_CONTROL(GuardState):
    index=72
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        for level in ['F0','F1','BF']:
            if disengageControlSequence(self,visObj=vis,level=level) == 'TRIPPED':
                return 'TRIPPED'
        return True

class GAS_CONTROL_ENGAGED(GuardState):
    index=80
    @watchdog_check
    def run(self):
        global vis
        checkvis()
        return True

class ENGAGING_OL_CONTROL(GuardState):
    index=131
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        return olBeginControlSequence(self,visObj=vis,level='IM')

class DISENGAGING_OL_CONTROL(GuardState):
    index=132
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        return olDisengageControlSequence(self,visObj=vis,level='IM')

class OL_CONTROL_ENGAGED(GuardState):
    index=140
    @watchdog_check
    def run(self):
        global vis
        checkvis()
        return True
class ALIGNING(GuardState):
    index=151
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        return olAlign(self,visObj=vis,level='IM',align='align')

class ALIGNED(GuardState):
    index=160
    @watchdog_check
    def run(self):
        global vis
        checkvis()
        return True

class MISALIGNING(GuardState):
    index=152
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        return olAlign(self,visObj=vis,level='IM',align='misalign')

class MISALIGNED(GuardState):
    index=161
    @watchdog_check
    def run(self):
        global vis
        checkvis()
        return True

class DISENGAGING_ALIGN(GuardState):
    index=153
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
#        return olDisengageControlSequence(self,visObj=vis,level='IM')

class FREEZING_OUTPUTS(GuardState):
    index=154
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        return freezingOutputs(self,visObj=vis)

class FLOAT(GuardState):
    index=162
    @watchdog_check
    def run(self):
        global vis
        checkvis()
        return True

class UNFREEZING_OUTPUTS(GuardState):
    index=155
    request = False
    @watchdog_check
    def main(self):
        global vis
        checkvis()
        return unFreezingOutputs(self,visObj=vis)

edges = [
('INIT','SAFE'),
#('RESET', 'SAFE'),
('TRIPPED','SAFE'),
('SAFE','MASTERSWITCH_ON'),
('MASTERSWITCH_ON','NEUTRAL'),
('NEUTRAL','ENGAGING_IP_CONTROL'),
('NEUTRAL','MASTERSWITCH_OFF'),
('MASTERSWITCH_OFF','SAFE'),
('ENGAGING_IP_CONTROL','IP_CONTROL_ENGAGED'),
('IP_CONTROL_ENGAGED','DISENGAGING_IP_CONTROL'),
('DISENGAGING_IP_CONTROL','NEUTRAL'),
('IP_CONTROL_ENGAGED','ENGAGING_GAS_CONTROL'),
('ENGAGING_GAS_CONTROL','GAS_CONTROL_ENGAGED'),
('GAS_CONTROL_ENGAGED','DISENGAGING_GAS_CONTROL'),
('DISENGAGING_GAS_CONTROL','IP_CONTROL_ENGAGED'),
('GAS_CONTROL_ENGAGED','ENGAGING_IM_DAMP'),
('ENGAGING_IM_DAMP','IM_DAMP_ENGAGED'),
('IM_DAMP_ENGAGED','DISENGAGING_IM_DAMP'),
('DISENGAGING_IM_DAMP','GAS_CONTROL_ENGAGED'),
('IM_DAMP_ENGAGED','ENGAGING_TM_DAMP'),
('ENGAGING_TM_DAMP','TM_DAMP_ENGAGED'),
('TM_DAMP_ENGAGED','DISENGAGING_TM_DAMP'),
('DISENGAGING_TM_DAMP','IM_DAMP_ENGAGED'),
('TM_DAMP_ENGAGED','ENGAGING_OL_CONTROL'),
('ENGAGING_OL_CONTROL','OL_CONTROL_ENGAGED'),
('OL_CONTROL_ENGAGED','DISENGAGING_OL_CONTROL'),
('DISENGAGING_OL_CONTROL','TM_DAMP_ENGAGED'),
('OL_CONTROL_ENGAGED','ALIGNING'),
('OL_CONTROL_ENGAGED','MISALIGNING'),
('OL_CONTROL_ENGAGED','FREEZING_OUTPUTS'),
('FREEZING_OUTPUTS','FLOAT'),
('FLOAT','UNFREEZING_OUTPUTS'),
('UNFREEZING_OUTPUTS','OL_CONTROL_ENGAGED'),
('ALIGNING','ALIGNED'),
('MISALIGNING','MISALIGNED'),
('ALIGNED','MISALIGNING'),
('ALIGNED','DISENGAGING_ALIGN'),
('MISALIGNED','ALIGNING'),
('MISALIGNED','DISENGAGING_ALIGN'),
('DISENGAGING_ALIGN','OL_CONTROL_ENGAGED')
]

