from guardian import GuardState
from guardian import GuardStateDecorator

import kagralib
import vislib

import importlib
sysmod = importlib.import_module(SYSTEM)

__,OPTIC = SYSTEM.split('_') # This instruction retrieves the name of the Guardian node running the code e.i. the suspension name: SYSTEM='VIS_BS'.
optic = OPTIC.lower()
sustype = vislib.get_Type(OPTIC)

##################################################
# initialization values
state = 'INIT' # For determining where the guardian state is.

# initial REQUEST state
request = 'SAFE'

# NOMINAL state, which determines when node is OK
nominal = 'OBSERVATION'

##################################################
# Decolators
class check_WD(GuardStateDecorator):
    '''Decorator to check watchdoc of payload'''
    def pre_exec(self):
        if vislib.is_WD_tripped(OPTIC, payload=True) or vislib.is_DGWD_tripped(OPTIC,payload=True):
            return 'PAY_TRIPPED'

class check_TWWD(GuardStateDecorator):
    '''Decorator to check watchdoc of tower part.'''
    def pre_exc(self):
        if vislib.is_WD_tripped(OPTIC, payload=False) or vislib.is_DGWD_tripped(OPTIC,payload=False):
            return 'TW_TRIPPED'

class check_OLRMS(GuardStateDecorator):
    '''Decorator to check rms of OpLev signal'''
    def pre_exec(self):
        if vislib.is_OLRMS_crazy(OPTIC):
            return 'PAY_LOCALDAMPED'

##################################################
# Common guardian state
def engage_main(self):
    self.counter = 0
    self.timer['waiting'] = 0
    for DoF in self.DoFs:
        kagralib.init_FB(
            self.chanfunc(OPTIC,DoF,self.stage),
            gain = [0,self.gain][self.integrator],
            limit = 60000,
            engaged_FM = self.init_FM[DoF],
            clear_history=(not self.integrator),
            hold_offset=True,
            disable_input=self.integrator)
        
def engage_run(self):
    return all([kagralib.engage_FB(self,self.chanfunc(OPTIC,DoF,self.stage),FM_list=self.bst_FM[DoF],gain=self.gain,ramptime=self.ramptime,integrate=self.integrator) for DoF in self.DoFs])

class engage_damping(GuardState):
    def __init__(self, logfunc, chanfunc, stage, init_FM, bst_FM, ramptime, integrator):
        super(engage_damping, self).__init__(logfunc)
        self.chanfunc = chanfunc
        self.stage = stage
        self.DoFs = init_FM.keys()
        self.init_FM = init_FM
        self.bst_FM = bst_FM
        self.gain = 1
        self.ramptime = ramptime
        self.integrator = integrator

    @check_TWWD
    def main(self):
        engage_main(self)

    @check_TWWD
    def run(self):
        return engage_run(self)
        

class engage_damping_for_PAY(GuardState):
    def __init__(self, logfunc, chanfunc, stage, init_FM, bst_FM, ramptime, integrator):
        super(engage_damping_for_PAY, self).__init__(logfunc)
        self.chanfunc = chanfunc
        self.stage = stage
        self.DoFs = init_FM.keys()
        self.init_FM = init_FM
        self.bst_FM = bst_FM
        self.gain = 1
        self.ramptime = ramptime
        self.integrator = integrator


    @check_TWWD
    @check_WD
    def main(self):
        engage_main(self)
        
    @check_TWWD
    @check_WD
    def run(self):
        return engage_run(self)


class disable_damping_for_PAY(GuardState):
    def __init__(self, logfunc, chanfunc, stage, bst_FM, ramptime, integrator):
        super(disable_damping_for_PAY, self).__init__(logfunc)
        self.chanfunc = chanfunc
        self.stage = stage
        self.DoFs = bst_FM.keys()
        self.bst_FM = bst_FM
        self.ramptime = ramptime
        self.integrator = integrator

    @check_WD
    @check_TWWD
    def main(self):
        self.counter = 0
        self.timer['waiting'] = 0

    @check_WD            
    @check_TWWD
    def run(self):
        return all([kagralib.disable_FB(self,self.chanfunc(OPTIC,DoF,self.stage),FM_list=self.bst_FM[DoF],ramptime=self.ramptime,integrate=self.integrator) for DoF in self.DoFs])

class disable_damping(GuardState):
    def __init__(self, logfunc, chanfunc, stage, bst_FM, ramptime, integrator):
        super(disable_damping, self).__init__(logfunc)
        self.chanfunc = chanfunc
        self.stage = stage
        self.DoFs = bst_FM.keys()
        self.bst_FM = bst_FM
        self.ramptime = ramptime
        self.integrator = integrator

    @check_TWWD
    def main(self):
        self.counter = 0
        self.timer['waiting'] = 0
            
    @check_TWWD
    def run(self):
        return all([kagralib.disable_FB(self,self.chanfunc(OPTIC,DoF,self.stage),FM_list=self.bst_FM[DoF],ramptime=self.ramptime,integrate=self.integrator) for DoF in self.DoFs])


##################################################
# State Definitions
class INIT(GuardState):
    request = False
    pass

class TRIPPED(GuardState):
    request = False
    def main(self):
        notify("please restart WatchDog!")
        self.timer['speak'] = 10
            

    def run(self):
        lib.all_off_quick(self,optic)
        ezca['VIS-'+optic+'_PAY_MASTERSWITCH'] = 'OFF'
        ezca['VIS-'+optic+'_MASTERSWITCH'] = 'OFF'
        
        kagralib.speak_aloud(optic+' watchdog has tripped')
        kagralib.speak_aloud('Please check the status of '+optic)
        
        return not (lib.is_pay_tripped(optic,par.BIO_PAY) or lib.is_twr_tripped(optic,par.BIO_TWR))


class TWR_TRIPPED(GuardState):
    request = False
    pass


class SAFE(GuardState):
    index = 0
    request = True
    pass

class REMOVE_TWR_DC(GuardState):
    pass
    
class TWR_IDLE(GuardState):
    index = 1
    request = True

    def main(self):
        ezca['VIS-%s_MASTERSWITCH'%OPTIC] = 1

    def run(self):
        return True

class ENGAGE_IP_LOCALDAMP(engage_damping):
    index = 2
    request = False
    def __init__(self,logfunc=None):
        super(ENGAGE_IP_LOCALDAMP, self).__init__(
            logfunc,
            chanfunc = vislib.IPDamp,
            stage = None,
            init_FM = sysmod.IP_LOCALDAMP['init_FM'],
            bst_FM = sysmod.IP_LOCALDAMP['bst_FM'],
            ramptime = sysmod.IP_LOCALDAMP['ramptime'],
            integrator = sysmod.IP_LOCALDAMP['integrator']
        )

class ENGAGE_GAS_LOCALDAMP(engage_damping):
    index = 3
    request = False
    def __init__(self,logfunc=None):
        super(ENGAGE_GAS_LOCALDAMP, self).__init__(
            logfunc,
            chanfunc = vislib.GASDamp,
            stage = None,
            init_FM = sysmod.GAS_LOCALDAMP['init_FM'],
            bst_FM = sysmod.GAS_LOCALDAMP['bst_FM'],
            ramptime = sysmod.GAS_LOCALDAMP['ramptime'],
            integrator = sysmod.GAS_LOCALDAMP['integrator']
        )

class ENGAGE_BF_LOCALDAMP(engage_damping):
    index = 4
    request = False
    def __init__(self,logfunc=None):
        super(ENGAGE_BF_LOCALDAMP, self).__init__(
            logfunc,
            chanfunc = vislib.LocalDamp,
            stage = 'BF',
            init_FM = sysmod.BF_LOCALDAMP['init_FM'],
            bst_FM = sysmod.BF_LOCALDAMP['bst_FM'],
            ramptime = sysmod.BF_LOCALDAMP['ramptime'],
            integrator = sysmod.BF_LOCALDAMP['integrator']
        )

class TWR_DAMPED(GuardState):
    index = 50
    request = True

    @check_TWWD
    def run(self):
        return True
    
class REMOVE_DC(GuardState):
    index = 51
    request = False

    @check_TWWD
    @check_WD
    def run(self):
        pass
    
class PAY_IDLE(GuardState):
    ''' No feedback, but DC value is not disabled in this state.'''
    index = 55
    request = True
    
    @check_TWWD
    @check_WD
    def run(self):
        return True


class ENGAGE_MN_LOCALDAMP(engage_damping_for_PAY):
    index = 60
    request = False
    def __init__(self,logfunc=None):
        super(ENGAGE_MN_LOCALDAMP, self).__init__(
            logfunc,
            chanfunc = vislib.LocalDamp,
            stage = 'MN',
            init_FM = sysmod.MN_LOCALDAMP['init_FM'],
            bst_FM = sysmod.MN_LOCALDAMP['bst_FM'],
            ramptime = sysmod.MN_LOCALDAMP['ramptime'],
            integrator = sysmod.MN_LOCALDAMP['integrator']
        )


class ENGAGE_IM_LOCALDAMP(engage_damping_for_PAY):
    index = 70
    request = False
    def __init__(self,logfunc=None):
        super(ENGAGE_IM_LOCALDAMP, self).__init__(
            logfunc,
            chanfunc = vislib.LocalDamp,
            stage = 'IM',
            init_FM = sysmod.IM_LOCALDAMP['init_FM'],
            bst_FM = sysmod.IM_LOCALDAMP['bst_FM'],
            ramptime = sysmod.IM_LOCALDAMP['ramptime'],
            integrator = sysmod.IM_LOCALDAMP['integrator']
        )


class PAY_LOCALDAMPED(GuardState):
    index = 100
    request = True

    @check_WD
    @check_TWWD
    def run(self):
        return True

class MISALIGNING(GuardState):
    index = 101
    request = False

    @check_TWWD
    @check_WD
    def main(self):
        self.ofschan = ezca.get_LIGOFilter(sysmod.MISALIGN_CHAN)
        self.ofschan.turn_on('OFFSET')
        self.ofschan.ramp_offset(sysmod.MISALIGN_OFFSET, sysmod.MISALIGN_TRAMP, False)
        self.ofschan.ramp_gain(1, sysmod.MISALIGN_TRAMP, False)

    @check_TWWD
    @check_WD
    def run(self):
        return not self.ofschan.is_offset_ramping()

class MISALIGNED(GuardState):
    index = 102
    request = True

    @check_TWWD
    @check_WD
    def run(self):
        return True

class REALIGNING(GuardState):
    index = 103
    request = False

    @check_TWWD
    @check_WD
    def main(self):
        self.ofschan = ezca.get_LIGOFilter(sysmod.MISALIGN_CHAN)
        self.ofschan.ramp_offset(0, sysmod.MISALIGN_TRAMP, False)

    @check_TWWD
    @check_WD
    def run(self):
        return not self.ofschan.is_offset_ramping()
    


class CHECK_TM_ANGLE(GuardState):
    index = 105
    request = False

    @check_WD
    @check_TWWD
    def main(self):
        self.timer['speak'] = 60
    
    @check_WD
    @check_TWWD
    def run(self):
        is_too_far = any([abs(ezca[vislib.DiagChan(OPTIC, DoF)] - vislib.OLSet(OPTIC,DoF).OUT16.get()) > sysmod.THRED_DISTANCE_SET2CURRENT for DoF in ['PIT','YAW']])
        if is_too_far and self.timer['speak']:
            kagralib.speak_aloud('%s cannot engage optical lever servo, since %s is too far from setpoint. Change the setpoint or align by yourself first.'%(OPTIC,OPTIC))
            self.timer['speak'] = 120

        is_outrange = any([(abs(ezca['VIS-%s_TM_OPLEV_%s_SEG%d_INMON'%(OPTIC,Type,ii+1)]) < 50) for ii in range(4) for Type in ['TILT','LEN']])
        log(is_outrange)
        if is_outrange and self.timer['speak']:
            kagralib.speak_aloud('%s cannot engage optical lever servo, since %s is out of optical lever range. Align by yourself first.'%(OPTIC,OPTIC))
            self.timer['speak'] = 120

        return not any([is_too_far, is_outrange])
            
    

class ENGAGE_MN_MNOLDAMP(engage_damping_for_PAY):
    index = 110
    request = False

    def __init__(self,logfunc=None):
        super(ENGAGE_MN_MNOLDAMP, self).__init__(
            logfunc,
            chanfunc = vislib.MNOLDamp,
            stage = 'MN',
            init_FM = sysmod.MN_MNOLDAMP['init_FM'],
            bst_FM = sysmod.MN_MNOLDAMP['bst_FM'],
            ramptime = sysmod.MN_MNOLDAMP['ramptime'],
            integrator = sysmod.MN_MNOLDAMP['integrator']
        )


class ENGAGE_TM_OLDAMP(engage_damping_for_PAY):
    index = 120
    request = False
    def __init__(self,logfunc=None):
        super(ENGAGE_TM_OLDAMP, self).__init__(
            logfunc,
            chanfunc = vislib.OLDamp,
            stage = 'TM',
            init_FM = sysmod.TM_OLDAMP['init_FM'],
            bst_FM = sysmod.TM_OLDAMP['bst_FM'],
            ramptime = sysmod.TM_OLDAMP['ramptime'],
            integrator = sysmod.TM_OLDAMP['integrator'],
        )
        
class ENGAGE_IM_OLDAMP(engage_damping_for_PAY):
    index = 130
    request = False
    def __init__(self,logfunc=None):
        super(ENGAGE_IM_OLDAMP, self).__init__(
            logfunc,
            chanfunc = vislib.OLDamp,
            stage = 'IM',
            init_FM = sysmod.IM_OLDAMP['init_FM'],
            bst_FM = sysmod.IM_OLDAMP['bst_FM'],
            ramptime = sysmod.IM_OLDAMP['ramptime'],
            integrator = sysmod.IM_OLDAMP['integrator'],
        )

class ENGAGE_MN_OLDAMP(engage_damping_for_PAY):
    index = 140
    request = False
    def __init__(self,logfunc=None):
        super(ENGAGE_MN_OLDAMP, self).__init__(
            logfunc,
            chanfunc = vislib.OLDamp,
            stage = 'MN',
            init_FM = sysmod.MN_OLDAMP['init_FM'],
            bst_FM = sysmod.MN_OLDAMP['bst_FM'],
            ramptime = sysmod.MN_OLDAMP['ramptime'],
            integrator = sysmod.MN_OLDAMP['integrator'],
        )


class ENGAGE_OLSERVO(engage_damping_for_PAY):
    index = 150
    request = False
    def __init__(self,logfunc=None):
        super(ENGAGE_OLSERVO, self).__init__(
            logfunc,
            chanfunc = vislib.OLServo,
            stage = 'TM',
            init_FM = sysmod.OLSERVO['init_FM'],
            bst_FM = sysmod.OLSERVO['bst_FM'],
            ramptime = sysmod.OLSERVO['ramptime'],
            integrator = sysmod.OLSERVO['integrator'],
            )

class ENGAGE_BPCOMB(GuardState):
    index = 160
    request = False

    @check_WD
    @check_TWWD
    def main(self):
        for ii in range(24):
            vislib.config_BPCOMB_from_description(optic = OPTIC, DOFNUM = ii+1,
                                           onSW = [1,2,3],TRAMP = 3, LIMIT = 15000)
        self.timer['waiting'] = 3

    @check_WD
    @check_TWWD
    def run(self):
        return self.timer['waiting']
    
class ALIGNED(GuardState):
    index = 500
    request = True

    @check_WD
    @check_TWWD
    def run(self):
        return True

class TRANSIT_TO_OBS(GuardState):
    index = 510
    request = False
    pass

class OBSERVATION(GuardState):
    index = 1000
    request = True
    pass
    
class BACK_TO_ALIGNED(GuardState):
    index = 990
    request = False
    pass

class DISABLE_BPCOMB(GuardState):
    index = 495
    @check_WD
    @check_TWWD
    def main(self):
        vislib.disable_BPCOMB(OPTIC)
        self.timer['waiting'] = 3

    @check_WD
    @check_TWWD
    def run(self):
        return self.timer['waiting']


class DISABLE_OLSERVO(disable_damping_for_PAY):
    index = 490
    request = False
    def __init__(self,logfunc=None):
        super(DISABLE_OLSERVO, self).__init__(
            logfunc,
            chanfunc = vislib.OLServo,
            stage = 'TM',
            bst_FM = sysmod.OLSERVO['bst_FM'],
            ramptime = sysmod.OLSERVO['ramptime'],
            integrator = sysmod.OLSERVO['integrator'],
            )

class DISABLE_TM_OLDAMP(disable_damping_for_PAY):
    index = 480
    request = False
    def __init__(self,logfunc=None):
        super(DISABLE_TM_OLDAMP, self).__init__(
            logfunc,
            chanfunc = vislib.OLDamp,
            stage = 'TM',
            bst_FM = sysmod.TM_OLDAMP['bst_FM'],
            ramptime = sysmod.TM_OLDAMP['ramptime'],
            integrator = sysmod.TM_OLDAMP['integrator'],
            )

class DISABLE_IM_OLDAMP(disable_damping_for_PAY):
    index = 470
    request = False
    def __init__(self,logfunc=None):
        super(DISABLE_IM_OLDAMP, self).__init__(
            logfunc,
            chanfunc = vislib.OLDamp,
            stage = 'IM',
            bst_FM = sysmod.IM_OLDAMP['bst_FM'],
            ramptime = sysmod.IM_OLDAMP['ramptime'],
            integrator = sysmod.IM_OLDAMP['integrator'],
            )


class DISABLE_MN_OLDAMP(disable_damping_for_PAY):
    index = 460
    request = False
    def __init__(self,logfunc=None):
        super(DISABLE_MN_OLDAMP, self).__init__(
            logfunc,
            chanfunc = vislib.OLDamp,
            stage = 'MN',
            bst_FM = sysmod.MN_OLDAMP['bst_FM'],
            ramptime = sysmod.MN_OLDAMP['ramptime'],
            integrator = sysmod.MN_OLDAMP['integrator'],
        )


class DISABLE_MN_MNOLDAMP(disable_damping_for_PAY):
    index = 450
    request = False
    def __init__(self,logfunc=None):
        super(DISABLE_MN_MNOLDAMP, self).__init__(
            logfunc,
            chanfunc = vislib.MNOLDamp,
            stage = 'MN',
            bst_FM = sysmod.MN_MNOLDAMP['bst_FM'],
            ramptime = sysmod.MN_MNOLDAMP['ramptime'],
            integrator = sysmod.MN_MNOLDAMP['integrator'],
        )



class DISABLE_IM_LOCALDAMP(disable_damping_for_PAY):
    index = 90
    request = False
    def __init__(self,logfunc=None):
        super(DISABLE_IM_LOCALDAMP, self).__init__(
            logfunc,
            chanfunc = vislib.LocalDamp,
            stage = 'IM',
            bst_FM = sysmod.IM_LOCALDAMP['bst_FM'],
            ramptime = sysmod.IM_LOCALDAMP['ramptime'],
            integrator = sysmod.IM_LOCALDAMP['integrator'],
        )


class DISABLE_MN_LOCALDAMP(disable_damping_for_PAY):
    index = 80
    request = False

    def __init__(self,logfunc=None):
        super(DISABLE_MN_LOCALDAMP, self).__init__(
            logfunc,
            chanfunc = vislib.LocalDamp,
            stage = 'MN',
            bst_FM = sysmod.MN_LOCALDAMP['bst_FM'],
            ramptime = sysmod.MN_LOCALDAMP['ramptime'],
            integrator = sysmod.MN_LOCALDAMP['integrator'],
        )


class DISABLE_BF_LOCALDAMP(disable_damping):
    index = 9
    request = False
    def __init__(self,logfunc=None):
        super(DISABLE_BF_LOCALDAMP, self).__init__(
            logfunc,
            chanfunc = vislib.LocalDamp,
            stage = 'BF',
            bst_FM = sysmod.BF_LOCALDAMP['bst_FM'],
            ramptime = sysmod.BF_LOCALDAMP['ramptime'],
            integrator = sysmod.BF_LOCALDAMP['integrator'],
        )

    
class DISABLE_GAS_LOCALDAMP(disable_damping_for_PAY):
    index = 8
    request = False
    def __init__(self,logfunc=None):
        super(DISABLE_GAS_LOCALDAMP, self).__init__(
            logfunc,
            chanfunc = vislib.GASDamp,
            stage = None,
            bst_FM = sysmod.GAS_LOCALDAMP['bst_FM'],
            ramptime = sysmod.GAS_LOCALDAMP['ramptime'],
            integrator = sysmod.GAS_LOCALDAMP['integrator'],
        )


class DISABLE_IP_LOCALDAMP(disable_damping_for_PAY):
    index = 7
    request = False
    pass

class CALMDOWN(GuardState):
    request = True
    pass

##################################################
# EDGES
##################################################

if sustype == 'TypeB':
    edges = [
        ('INIT','SAFE'),
        ('TRIPPED','SAFE'),
        ('SAFE','MASTERSWITCH_ON'),
        ('MASTERSWITCH_ON','NEUTRAL'),
        ('NEUTRAL','ENGAGING_IP_CONTROL'),
        ('NEUTRAL','MASTERSWITCH_OFF'),
        ('MASTERSWITCH_OFF','SAFE'),
        ('ENGAGING_IP_CONTROL','IP_CONTROL_ENGAGED'),
        ('IP_CONTROL_ENGAGED','DISENGAGING_IP_CONTROL'),
        ('DISENGAGING_IP_CONTROL','NEUTRAL'),
        ('IP_CONTROL_ENGAGED','ENGAGING_GAS_CONTROL'),
        ('ENGAGING_GAS_CONTROL','TWR_DAMPED'),
        ('TWR_DAMPED','DISENGAGING_GAS_CONTROL'),
        ('DISENGAGING_GAS_CONTROL','IP_CONTROL_ENGAGED'),

        ('PAY_TRIPPED','TWR_DAMPED'),
        
        ('TWR_DAMPED','ENGAGE_IM_LOCALDAMP'),
        ('ENGAGE_IM_LOCALDAMP','PAY_LOCALDAMPED'),
        ('PAY_LOCALDAMPED','DISABLE_IM_LOCALDAMP'),
        ('DISABLE_IM_LOCALDAMP','TWR_DAMPED'),
        ('PAY_LOCALDAMPED','CHECK_TM_ANGLE'),
        ('CHECK_TM_ANGLE','PAY_LOCALDAMPED',),
        ('CHECK_TM_ANGLE','ENGAGE_TM_OLDAMP'),
        ('ENGAGE_TM_OLDAMP','ENGAGE_IM_OLDAMP'),
        ('ENGAGE_IM_OLDAMP','ENGAGE_OLSERVO'),
        ('ENGAGE_OLSERVO','ALIGNED'),
        ('ALIGNED','DISABLE_OLSERVO'),
        ('DISABLE_OLSERVO','DISABLE_IM_OLDAMP'),
        ('DISABLE_IM_OLDAMP','DISABLE_TM_OLDAMP'),
        ('DISABLE_TM_OLDAMP','PAY_LOCALDAMPED'),

        ('ALIGNED','TRANSIT_TO_OBS'),
        ('TRANSIT_TO_OBS','OBSERVATION'),
        ('OBSERVATION','BACK_TO_ALIGNED'),
        ('BACK_TO_ALIGNED','ALIGNED'),

        ('PAY_LOCALDAMPED','MISALIGNING'),
        ('MISALIGNING','MISALIGNED'),
        ('MISALIGNED','REALIGNING'),
        ('REALIGNING','PAY_LOCALDAMPED'),
    ]

elif sustype == 'TypeBp':
    
    edges = [
    ('INIT','SAFE'),
        ('TRIPPED','SAFE'),
        ('SAFE','TWR_IDLE'),
        ('TWR_IDLE','SAFE'),
        ('TWR_IDLE','ENGAGE_GAS_LOCALDAMP'),
        ('ENGAGE_GAS_LOCALDAMP','ENGAGE_BF_LOCALDAMP'),
        ('ENGAGE_BF_LOCALDAMP','TWR_DAMPED'),
        ('TWR_DAMPED','DISABLE_BF_LOCALDAMP'),
        ('DISABLE_BF_LOCALDAMP','DISABLE_GAS_LOCALDAMP'),
        ('DISABLE_GAS_LOCALDAMP','TWR_IDLE'),

    ('TWR_DAMPED','ENGAGE_IM_LOCALDAMP'),
        ('ENGAGE_IM_LOCALDAMP','PAY_LOCALDAMPED'),
        ('PAY_LOCALDAMPED','CHECK_TM_ANGLE'),
        ('CHECK_TM_ANGLE','PAY_LOCALDAMPED'),
        ('CHECK_TM_ANGLE','ENGAGE_TM_OLDAMP'),
        ('ENGAGE_TM_OLDAMP','ENGAGE_IM_OLDAMP'),
        ('ENGAGE_IM_OLDAMP','ENGAGE_OLSERVO'),
        ('ENGAGE_OLSERVO','ALIGNED'),
        ('ALIGNED','DISABLE_OLSERVO'),
        ('DISABLE_OLSERVO','DISABLE_IM_OLDAMP'),
        ('DISABLE_IM_OLDAMP','DISABLE_TM_OLDAMP'),
        ('DISABLE_TM_OLDAMP','PAY_LOCALDAMPED'),
        ('PAY_LOCALDAMPED','DISABLE_IM_LOCALDAMP'),
        ('DISABLE_IM_LOCALDAMP','TWR_DAMPED'),

        ('ALIGNED','TRANSIT_TO_OBS'),
        ('TRANSIT_TO_OBS','OBSERVATION'),
        ('OBSERVATION','BACK_TO_ALIGNED'),
        ('BACK_TO_ALIGNED','ALIGNED'),

        ('PAY_LOCALDAMPED','MISALIGNING'),
        ('MISALIGNING','MISALIGNED'),
        ('MISALIGNED','REALIGNING'),
        ('REALIGNING','PAY_LOCALDAMPED'),
    ]

elif sustype == 'TypeA':
    
    edges = [
    ('INIT','SAFE'),
        ('RESET', 'SAFE'),
        ('TRIPPED','SAFE'),
        ('PAY_TRIPPED','TWR_DAMPED'),
        ('SAFE','OUTPUT_ON'),
        ('OUTPUT_ON','UNDAMPED'),
        ('UNDAMPED','ENGAGE_TWR_DAMPING'),
        ('ENGAGE_TWR_DAMPING','TWR_DAMPED'),
        ('TWR_DAMPED','DISABLE_TWR_DAMPING'),
        ('DISABLE_TWR_DAMPING','UNDAMPED'),
        ('UNDAMPED','SAFE'),
        
        ('TWR_DAMPED','ENGAGE_MN_LOCALDAMP'),
        ('ENGAGE_MN_LOCALDAMP','PAY_LOCALDAMPED'),
        ('PAY_LOCALDAMPED','DISABLE_MN_LOCALDAMP'),
        ('DISABLE_MN_LOCALDAMP','TWR_DAMPED'),
        
        ('PAY_LOCALDAMPED','ENGAGE_MN_MNOLDAMP'),
        ('ENGAGE_MN_MNOLDAMP','CHECK_TM_ANGLE'),
        ('CHECK_TM_ANGLE','ENGAGE_OLSERVO'),
        ('ENGAGE_OLSERVO','ENGAGE_TM_OLDAMP'),
        ('ENGAGE_TM_OLDAMP','ENGAGE_MN_OLDAMP'),
        ('ENGAGE_MN_OLDAMP','ENGAGE_IM_OLDAMP'),
        ('ENGAGE_IM_OLDAMP','ENGAGE_BPCOMB'),
        ('ENGAGE_BPCOMB','ALIGNED'),
        ('ALIGNED','DISABLE_BPCOMB'),
        ('DISABLE_BPCOMB','DISABLE_IM_OLDAMP'),
        ('DISABLE_IM_OLDAMP','DISABLE_MN_OLDAMP'),
        ('DISABLE_MN_OLDAMP','DISABLE_TM_OLDAMP'),
        ('DISABLE_TM_OLDAMP','DISABLE_MN_MNOLDAMP'),
        ('DISABLE_MN_MNOLDAMP','DISABLE_OLSERVO'),
        ('DISABLE_OLSERVO','PAY_LOCALDAMPED'),

        ('ALIGNED','TRANSIT_TO_OBS'),
        ('TRANSIT_TO_OBS','OBSERVATION'),
        ('OBSERVATION','BACK_TO_ALIGNED'),
        ('BACK_TO_ALIGNED','ALIGNED'),

        ('PAY_LOCALDAMPED','MISALIGNING'),
        ('MISALIGNING','MISALIGNED'),
        ('MISALIGNED','REALIGNING'),
        ('REALIGNING','PAY_LOCALDAMPED'),
    ]
